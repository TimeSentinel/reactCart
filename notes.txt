TODO
-------------------------------------------------------------------------

todo: ask Aiden about the searchParam delay issue

todo: NAVBAR - add click to open for 'Menu' (for touch)

todo: MENU - add options handling to product details
todo: MENU - add options handling to cart

todo: MENU - names on items
todo: MENU - add more foods to json

todo: MENU - make product details pop up
todo: CART - add name and instructions fields

todo: HEADER - responsiveness: header
todo: HEADER - responsiveness: hamburger menu
todo: MENU - responsiveness: main menu
todo: CART - responsiveness: cart
todo: MENU - responsiveness: product detail page

todo: *home page
todo: *about us page
todo: CART - submit pickup/delivery order
todo: HEADER/FOOTER - social media links
todo: HEADER - restaurant name and logo

todo: *contact page: file upload and email - custom server?
todo: BLOG - news/blog from json
todo: CATERING - menu page
todo: CATERING - scheduling calendar


todo: BLOG - news, Cart from database
todo: CMS - admin login

todo: USER - user accounts: login, user page, user settings, theme, etc
todo: USER - user accounts: order history, billing info
todo: MAINTENANCE - check local storage for old/corrupt setup and clear or modify as needed

todo: CART - payment for cart

CODE
-------------------------------------------------------------------------
MAP
examples:
1.
    const data = {stuff}
    const newName = data.map(itemName => {
        return {
           content: `${itemName.title} - ${itemName.description}`,
           price: itemName.price,
        }
    })

2.     const newName = data.map(itemName => {
            const itemText= `${itemName.title} - ${itemName.description}`,
            return <li>{itemText}</li>
       })

FILTER
example:
1.
    const lowCaloriesDesserts = props.data
     .filter((dessert) => {
       return dessert.calories < 500;
     })
     .sort((a, b) => {
       return a.calories - b.calories;
     })
     .map((dessert) => {
       return (
         <li>
           {dessert.name} - {dessert.calories} cal
         </li>
       );
     });

 KEYS
  - do not use indexes
  - must be unique
 examples:
 1. Reverse Order (mutative)
    setItem([...items].reverse());

 FORMS
 onChange, onSubmit

     handleChange(event) {
        setValue(event.target.value);
     }

examples:
1. UNCONTROLLED INPUT:
     const Form = () => {
     const inputRef = useRef(null);

     const handleSubmit = () => {
       const inputValue = inputRef.current.value;
       // Do something with the value
     }
     return (
       <form onSubmit={handleSubmit}>
         <input ref={inputRef} type="text" />
       </form>
     );
    };

2. CONTROLLED INPUT:
    const Form = () => {
     const [value, setValue] = useState("");

     const handleChange = (e) => {
       setValue(e.target.value)
     }

     return (
       <form>
         <input
           value={value}
           onChange={handleChange}
           type="text"
         />
       </form>
     );
    };

3. FILE INPUT:
    const Form = () => {
     const fileInput = useRef(null);

     const handleSubmit = (e) => {
       e.preventDefault();
       const files = fileInput.current.files;
       // Do something with the files here
     }

     return (
       <form onSubmit={handleSubmit}>
         <input
           ref={fileInput}
           type="file"
         />
       </form>
     );
    };







