TODO
-------------------------------------------------------------------------

todo: ask Aiden about the searchParam delay issue

todo: MENU - add options handling to product details
todo: MENU - add options handling to cart

todo: MENU - names on items
todo: MENU - add more foods to json

todo: MENU - make product details pop up
todo: CART - add name and instructions fields

todo: HEADER - responsiveness: header
todo: HEADER - responsiveness: hamburger menu
todo: MENU - responsiveness: main menu
todo: CART - responsiveness: cart
todo: MENU - responsiveness: product detail page

todo: *home page
todo: *about us page
todo: CART - submit pickup/delivery order
todo: HEADER/FOOTER - social media links
todo: HEADER - restaurant name and logo

todo: *contact page: file upload and email - custom server?
todo: BLOG - news/blog from json
todo: CATERING - menu page
todo: CATERING - scheduling calendar


todo: BLOG - news, Cart from database
todo: CMS - admin login

todo: USER - user accounts: login, user page, user settings, theme, etc
todo: USER - user accounts: order history, billing info
todo: MAINTENANCE - check local storage for old/corrupt setup and clear or modify as needed

todo: CART - payment for cart

CODE
##################################################################################
HTML: document.title (tap title)


--------------------------------------------------------------------------
MAP
examples:
1.
    const data = {stuff}
    const newName = data.map(itemName => {
        return {
           content: `${itemName.title} - ${itemName.description}`,
           price: itemName.price,
        }
    })

2.     const newName = data.map(itemName => {
            const itemText= `${itemName.title} - ${itemName.description}`,
            return <li>{itemText}</li>
       })
--------------------------------------------------------------------------
FILTER
example:
1.
    const lowCaloriesDesserts = props.data
     .filter((dessert) => {
       return dessert.calories < 500;
     })
     .sort((a, b) => {
       return a.calories - b.calories;
     })
     .map((dessert) => {
       return (
         <li>
           {dessert.name} - {dessert.calories} cal
         </li>
       );
     });
--------------------------------------------------------------------------
 KEYS
  - do not use indexes
  - must be unique
 examples:
 1. Reverse Order (mutative)
    setItem([...items].reverse());
--------------------------------------------------------------------------
 FORMS
 onChange, onSubmit
     handleChange(event) {
        setValue(event.target.value);
     }

examples:
1. UNCONTROLLED INPUT:
     const Form = () => {
     const inputRef = useRef(null);
     const handleSubmit = () => {
       const inputValue = inputRef.current.value;
       // Do something with the value
     }
     return (
       <form onSubmit={handleSubmit}>
         <input ref={inputRef} type="text" />
       </form>
     );    };

2. CONTROLLED INPUT:
    const Form = () => {
     const [value, setValue] = useState("");
     const handleChange = (e) => {
       setValue(e.target.value)
     }
     return (
       <form>
         <input
           value={value}
           onChange={handleChange}
           type="text"
         />
       </form>
     );    };

3. FILE INPUT:
    const Form = () => {
     const fileInput = useRef(null);
     const handleSubmit = (e) => {
       e.preventDefault();
       const files = fileInput.current.files;
       // Do something with the files here
     }
     return (
       <form onSubmit={handleSubmit}>
         <input
           ref={fileInput}
           type="file"
         />
       </form>
     );
    };

4. registration form with validation
        <form onSubmit={handleSubmit}>
           <fieldset>
             <h2>Sign Up</h2>
             <div className="Field">
               <label>
                 First name <sup>*</sup>
               </label>
               <input
                 value={firstName}
                 onChange={(e) => {
                   setFirstName(e.target.value);
                 }}
                 placeholder="First name"
               />
             </div>
             <div className="Field">
               <label>Last name</label>
               <input
                 value={lastName}
                 onChange={(e) => {
                   setLastName(e.target.value);
                 }}
                 placeholder="Last name"
               />
             </div>
             <div className="Field">
               <label>
                 Email address <sup>*</sup>
               </label>
               <input
                 value={email}
                 onChange={(e) => {
                   setEmail(e.target.value);
                 }}
                 placeholder="Email address"
               />
             </div>
             <div className="Field">
               <label>
                 Password <sup>*</sup>
               </label>
               <input
                 value={password.value}
                 type="password"
                 onChange={(e) => {
                   setPassword({ ...password, value: e.target.value });
                 }}
                 onBlur={() => {
                   setPassword({ ...password, isTouched: true });
                 }}
                 placeholder="Password"
               />
               {password.isTouched && password.value.length < 8 ? (
                 <PasswordErrorMessage />
               ) : null}
             </div>
             <div className="Field">
               <label>
                 Role <sup>*</sup>
               </label>
               <select value={role} onChange={(e) => setRole(e.target.value)}>
                 <option value="role">Role</option>
                 <option value="individual">Individual</option>
                 <option value="business">Business</option>
               </select>
             </div>
             <button type="submit" disabled={!getIsFormValid()}>
               Create account
             </button>
           </fieldset>
         </form>
--------------------------------------------------------------------------
MEMO
example:
    const App = () => {
     const value = {a: 'hi', b: 'bye'};
      return (
          <AppContext.Provider value={value}>
          <ComponentA />
          </AppContext.Provider>
     );
    };
    const ComponentA = React.memo(() => <ComponentB />);
    const ComponentB = () => <ComponentC />;
    const ComponentC = () => {
        const contextValue = useContext(AppContext);
        return null;
    };

--------------------------------------------------------------------------
PROPS
1. CHILDREN
    function Button(props) {
        <button>{props.children}</button>
    }
    <Button>text here</Button>
--------------------------------------------------------------------------
useSTATE
example
    setGiftCard(prevState => {
      return (        {
          ...prevState,
          text: "Your coupone has been used",
          instructions: "Please visit our restaurant to renew your gift card.",
          valid: false,
        }      )    })
--------------------------------------------------------------------------
STATE HOOK, PROPS, MAP
example:
    function GoalForm(props {
        const [formData, setFormData] = useState({goal: "", by: ""});
        function changeHandler(e) {setFormData({ ...formData, [e.target.name]: e.target.value });}
        function submitHandler(e) {
        e.preventDefault();
        props.onAdd(formData);
        setFormData({gaol: "", by: ""});
        }
        return(
        <form onSubmit={submitHandler}>
            <input type="text" name="goal" placeholder="Goal" value={formData.goal} onChange={changeHandler} />
            <input type="text" name="by" placeholder="By" value={formData.by} onChange={changeHandler} />
            <button>Submit</button>
        </form>
        );  }
    function ListOfGoals(props) {
        return (
            <ul>
                {props.allGoals.map((g) => (
                    <li key={g.goal}><span>My goal is to {g.goal}, by {g.by}</span></li>
                ))}
            </ul>
        )  }
    export default function App() {
        const [allGoals, updateAllGoals] = useState([]); }
        function addGoal(goal) { updateAllGoals([...allGoals, goal]; }
        return (
        <div className="App">
            <GoalForm onAdd={addGoal} />
            <ListOfGoals allGoals={allGoals} />
        </div>
        );  }

--------------------------------------------------------------------------
FETCH
examples
1.
    useEffect(() => {
        fetch('https://daddress/api')
            .then((response) => response.json())
            .then((data) => console.log(data)
            .catch(error) => console.log(error);
    }, []);

2.
      const fetchData = () => {
        fetch(`https://api.coindesk.com/v1/bpi/currentprice.json`)
          .then((response) => response.json())
          .then((jsonData) => setBtcData(jsonData.bpi.USD))
          .catch((error) => console.log(error));
      };

      useEffect(() => {
        fetchData();
      }, []);
     ---------- conditional rendering based on promise return -------------
     return someStateVariable.length > 0 ? (
        <div>
          <h1>Data returned:</h1>
          <h2>{someStateVariable.results[0].price}</h2>
        </div>
      ) : ( <h1>Data pending...</h1> );
--------------------------------------------------------------------------

useReducer
example
1.
    const reducer = (state, action) => {
        if a(action.type === 'buy_ingredients') return {money: state.money - 10};
        if a(action.type === 'sell_a_meal') return {money: state.money + 10};
        return state;
    }
    function App() {
        const initialState = {money: 100};
        const [state, dispatch] = useReducer(reducer, initialState);
        return (
            <div className="App">
                <button onClick={() => dispatch({type: 'buy_ingredients'})}>buy stuff</button>
                <button onClick={() => dispatch({type: 'sell_a_meal'})}>sell stuff</button>
    );  }
--------------------------------------------------------------------------
useRef
example
1.
    function App() {
        const formInputRef = useRef(null);
        const focusInput = () => {
        formInputRef.current.focus();
    }
    return (
        <>
            <input type=text useRef={formInputRef} />
            <button onClick={focusInput}> Focus input </button>
        </>
    ); }




